(defcfg
  concurrent-tap-hold        yes
  movemouse-smooth-diagonals yes ;; non-smooth diagonals when drawing a line in some app
)

(defsrc
  f13   1     2     3     4     5             6     7     8     9     0     -
  grv   q     w     e     r     t             y     u     i     o     p     del
  esc   a     s     d     f     g             h     j     k     l     ;     '
  lsft  z     x     c     v     b             n     m     ,     .     /     f14
        =     lmet  lalt  lctl  spc           bspc  ret   tab   [     ]
)

(deflayer base
  XX    _     _     _     _     _             _     _     _     _     _     _
  _     _     _     _     _     _             _     _     _     _     _     _
  @#num @a    @s    @d    @f    _             _     @j    @k    @l    @;    _
  @sft  _     _     _     _     _             _     _     _     _     _     @#nomod
        @fn   @gui  @alt  @ctab @#nav         @#bs  @#sym @#fun _     _
)

(deflayer symbol
  XX    f1    f2    f3    f4    f5            f6    f7    f8    f9    f10   f11
  _     S-1   S-2   S-3   S-4   S-5           S-6   S-7   S-8   S-9   S-0   f12
  S-grv grv   S-=   =     S-[   S-]           [     ]     S--   -     S-;   S-'
  _     XX    XX    \     S-\   XX            XX    XX    S-,   S-.   S-/   XX
        _     _     _     _     _             _     _     _     _     _
)

(deflayer number
  XX    _     _     _     _     _             _     _     _     _     _     _
  _     _     _     _     _     _             -     7     8     9     XX    _
  _     _     _     _     _     _             S-=   4     5     6     S-8   _
  _     _     _     _     _     _             0     1     2     3     /     XX
        _     _     _     _     _             _     ret   .     XX    XX
)

(deflayer navigation
  XX    _     _     _     _     _             _      _     _     _     _     _
  _     M-1   M-2   M-3   M-4   M-5           M-6    M-7   M-8   M-9   M-0   _
  _     _     _     _     _     _             lft    down  up    rght  _     _
  _     _     _     _     @vim  _             home   pgdn  pgup  end   ins   XX
        _     _     _     _     _             C-bspc S-ret A-tab _     _ 
)

(deflayer ctrl
  XX    C-1   C-2   C-3   C-4   C-5           C-6    C-7   C-8   C-9   C-0   C--
  _     C-q   C-w   C-e   C-r   C-t           C-y    C-u   C-i   C-o   C-p   C-del
  _     C-a   C-s   C-d   C-f   C-g           A-b    C-j   C-k   A-f   C-;   C-'
  _     C-z   C-x   C-c   C-v   C-b           C-n    C-m   C-,   C-.   C-/   XX
        _     _     _     _     _             A-bspc C-ret C-tab _     _ 
)

(deflayer sftbs
  XX    S-1   S-2   S-3   S-4   S-5           S-6   S-7   S-8   S-9   S-0   S--
  _     S-q   S-w   S-e   S-r   S-t           S-y   S-u   S-i   S-o   S-p   S-del
  _     S-a   S-s   S-d   S-f   S-g           S-h   S-j   S-k   S-l   S-;   S-'
  _     S-z   S-x   S-c   S-v   S-b           S-n   S-m   S-,   S-.   S-/   XX
        _     _     _     _     _             _     _     _     _     _ 
)

(deflayer shift
  XX    S-1   S-2   S-3   S-4   S-5           S-6   S-7   S-8   S-9   S-0   S--
  _     S-q   S-w   S-e   S-r   S-t           S-y   S-u   S-i   S-o   S-p   S-del
  _     S-a   S-s   S-d   S-f   S-g           S-h   S-j   S-k   S-l   S-;   S-'
  _     S-z   S-x   S-c   S-v   S-b           S-n   S-m   S-,   S-.   S-/   XX
        _     _     _     _     _             _     _     _     _     _ 
)

(deflayer alt
  XX    A-1   A-2   A-3   A-4   A-5           A-6   A-7   A-8   A-9   A-0   A--  
  _     A-q   A-w   A-e   A-r   A-t           A-y   A-u   A-i   A-o   A-p   A-del
  _     A-a   A-s   A-d   A-f   A-g           A-h   A-j   A-k   A-l   A-;   A-'
  _     A-z   A-x   A-c   A-v   A-b           A-n   A-m   A-,   A-.   A-/   XX
        _     _     _     _     _             _     _     _     _     _ 
)

(deflayer fun
  XX    _     _     _     _     _             _     _     _     _     _     _
  _     A-1   A-2   A-3   A-4   A-5           A-6   A-7   A-8   A-9   A-0   _
  _     _     _     _     _     prnt          _     mute  volu  pp    _     _
  _     _     _     _     _     _             _     prev  vold  next  _     XX
        _     _     _     _     _             _     _     _     _     _ 
)

(deflayer mouse
  XX    _     _     _     _     _             _     _     _     _     _     _
  _     _     _     _     _     _             _     mlft  @ms↑  mrgt  mmid  _
  _     _     _     _     _     _             _     @ms←  @ms↓  @ms→  @slw  _
  _     _     _     _     _     _             _     @mwl  @mwd  @mwu  @mwr  XX
        _     _     _     _     _             _     _     _     _     _ 
)

(deflayer nomods
  XX    _     _     _     _     _             _     _     _     _     _     _
  _     _     _     _     _     _             _     _     _     _     _     _
  _     _     _     _     _     _             _     _     _     _     _     _
  _     _     _     _     _     _             _     _     _     _     _     @#nomod
        _     _     _     _     _             _     _     _     _     _ 
)
(deffakekeys
  to-base (layer-switch base)
)

(defvar
  left-hand-keys (
    q w e r t
    a s d f g
    z x c v b
  )
  right-hand-keys (
    y u i o p
    h j k l ;
    n m , . /
  )
)

(defalias
  #num (tap-hold-press 150 200 esc (layer-while-held number))
  #sym (tap-hold-press 100 150 ret (layer-while-held symbol))
  #fun (tap-hold-press 100 150 tab (layer-while-held fun))
  #nomod (tap-dance 500 ((layer-switch base) (layer-switch nomods)))
  ctab (tap-hold-press 100 150 tab (layer-while-held ctrl))
  sft (tap-dance 300 ((layer-while-held shift) (multi lsft lalt)))
  alt (tap-dance 300 ((layer-while-held alt) (multi lctl lsft) (multi lctl lsft lalt)))
  gui (tap-dance 300 (lmet (multi lmet lsft) (multi lmet lsft lctl)))
  fn (tap-dance 300 ((multi lctl lsft lmet ralt)))
  ;; aret (multi (release-key tab) ret) ;; release tab if held and also press enter

  ;; Macro
  vim (macro C-(x 50 v))

  ;; Home row mod
  tap (multi
    (layer-switch nomods)
    (on-idle-fakekey to-base tap 20)
  )
  a (tap-hold-release-keys 150 200 (multi a @tap) lmet $left-hand-keys)
  s (tap-hold-release-keys 150 200 (multi s @tap) lalt $left-hand-keys)
  d (tap-hold-release-keys 100 150 (multi d @tap) lsft $left-hand-keys)
  f (tap-hold-release-keys 100 150 (multi f @tap) lctl $left-hand-keys)
  j (tap-hold-release-keys 100 150 (multi j @tap) lctl $right-hand-keys)
  k (tap-hold-release-keys 100 150 (multi k @tap) lsft $right-hand-keys)
  l (tap-hold-release-keys 150 200 (multi l @tap) lalt $right-hand-keys)
  ; (tap-hold-release-keys 150 200 (multi ; @tap) lmet $right-hand-keys)
  #nav (tap-hold-release-keys 100 150 (multi spc @tap) (layer-while-held navigation) (spc))
  #bs (tap-hold-release-keys 100 150 (multi bspc @tap) (layer-while-held sftbs) (bspc))

  ;; Mouse
  ms↑ (movemouse-accel-up 1 1000 1 5)
  ms← (movemouse-accel-left 1 1000 1 5)
  ms↓ (movemouse-accel-down 1 1000 1 5)
  ms→ (movemouse-accel-right 1 1000 1 5)
  mwu (mwheel-up    50 120)
  mwd (mwheel-down  50 120)
  mwl (mwheel-left  50 120)
  mwr (mwheel-right 50 120)
  fst (movemouse-speed 200)
  slw (movemouse-speed 10)

  ;; chq (chord ctrl-qw q)
  ;; chw (chord ctrl-qw w)
)

;; (defchords ctrl-qw 1000 (q w) (macro C-S-1 50 C-2))
